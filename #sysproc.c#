#include "types.h"
#include "x86.h"
#include "defs.h"
#include "param.h"
#include "memlayout.h"
#include "mmu.h"
#include "proc.h"

int
sys_fork(void)
{
  return fork();
}

int
sys_exit(void)
{
  exit();
  return 0;  // not reached
}

int
sys_wait(void)
{
  return wait();
}

int
sys_kill(void)
{
  int pid;

  if(argint(0, &pid) < 0)
    return -1;
  return kill(pid);
}

int
sys_getpid(void)
{
  return proc->pid;
}

int
sys_sbrk(void)
{
  int addr;
  int n;

  if(argint(0, &n) < 0)
    return -1;
  addr = proc->sz;
  /*** decomment here
//  if(growproc(n) < 0)
//    return -1;
*/
/***
add my code in here homework 4
task : allocate page 
 ***/
  /*
  uint sz;
  sz = proc->sz;
  // allocuvm( proc->pgdir, sz, sz + n ))
  // allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
  uint oldsz = sz;
  uint newsz = sz + n;
  char *mem;
  uint a;
  if (newsz > KERNBASE)
  {
    return 0;
  }
  if (newsz < oldsz)
  {
    return oldsz;
  }
  a = PGROUNDUP(oldsz);
  for (; a< newsz; a += PGSIZE)
  {
    mem = kalloc();
    if (mem == 0)
    {
      cprintf("allcocuvm out of memory\n");
      deallocuvm(proc->pddir, newsz, oldsz);
      return 0;
    }
    memset(mem, 0 , PGSIZE);
    mappages(proc->pgdir, newsz, oldsz);
  }
  if (newsz == 0)
    return -1;
    proc-> = newsz;*/
  return  addr;
}

int
sys_sleep(void)
{
  int n;
  uint ticks0;
  
  if(argint(0, &n) < 0)
    return -1;
  acquire(&tickslock);
  ticks0 = ticks;
  while(ticks - ticks0 < n){
    if(proc->killed){
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
  }
  release(&tickslock);
  return 0;
}

// return how many clock tick interrupts have occurred
// since start.
int
sys_uptime(void)
{
  uint xticks;
  
  acquire(&tickslock);
  xticks = ticks;
  release(&tickslock);
  return xticks;
}

// homewok 3
// kill the qemu
void 
sys_halt(void)
{
  char *p = "Shutdown";
  for( ; *p; p++)
    outb(0x8900, *p);
}
